#!/usr/bin/perl

use strict;
use integer;
use Time::HiRes qw(usleep);

my $trace = 0;

my @input;
my @output;

my $sum = 0;

$/ = undef; # slurp

while ($ARGV[0] =~ /^-/)
{
	my $arg = shift @ARGV;
	if ($arg eq '-t')
	{
		$trace = 1;
	}
	elsif ($arg eq '-i')
	{
		push @input, shift @ARGV;
	}
}

$/ = undef;

my $program = <>;
$program =~ s/\s+//g;

my @program = split(",", $program);

my $cpu = make_cpu("cpu", \@program, \@input, \@output);

my @dirs = (undef, [0, -1], [0, 1], [-1, 0], [1, 0]);
my @map = ("@");
my ($min_x, $min_y) = (0, 0);

my @frontier;

run_cpu($cpu);

# charmode();
# 
# my ($x, $y) = (0, 0);
# while (1)
# {
# 	draw_map();
# 	my $key = getkey();
# 	last if ($key == 'q');
# 	my $dir;
# 	if ($key == '8')
# 	{
# 		$dir = 1;
# 	}
# 	elsif ($key == '7')
# 	{
# 		$dir = 2;
# 	}
# 	elsif ($key == '6')
# 	{
# 		$dir = 3;
# 	}
# 	elsif ($key == '9')
# 	{
# 		$dir = 4;
# 	}
# 	my $x2 = $x + $dirs[$dir]->[0];
# 	my $y2 = $y + $dirs[$dir]->[1];
# 	
# 	push @{$cpu->{'input'}}, $dir;
# 	run_cpu($cpu);
# 
# 	my $move = shift @{$cpu->{'output'}};
# 	if ($move == 0)
# 	{
# 		add_to_map($x2, $y2, '#');
# 	}
# 	elsif ($move == 1)
# 	{
# 		add_to_map($x, $y, '.');
# 		$x = $x2;
# 		$y = $y2;
# 		add_to_map($x, $y, '@');
# 	}
# 	else
# 	{
# 		add_to_map($x2, $y2, 'O');
# 	}
# }
# 
# linemode();
# 
# exit(0);

push @frontier, new_frontier(0, 0, $cpu);

for (my $steps = 1; 1; $steps++)
{
	my @next;
	while (my $state = shift @frontier)
	{
		my ($x, $y, $cpu) = @$state;
		my $dir = $cpu->{'input'}->[0];
		run_cpu($cpu);

		my $tile = shift @{$cpu->{'output'}};
		if ($tile == 0)
		{
			add_to_map($x, $y, '#');
			draw_map();
		}
		elsif ($tile == 1)
		{
			add_to_map($x, $y, '.');
			draw_map();
			push @next, new_frontier($x, $y, $cpu);
		}
		else
		{
			add_to_map($x, $y, 'O');
			draw_map();
			printf("Steps: %d\n", $steps);
			exit(0);
		}
	}
	#usleep(500000);

	@frontier = @next;
}

exit(0);

sub new_frontier
{
	my ($x, $y, $cpu) = @_;
	my @new;

	for (my $dir = 1; $dir <= 4; $dir++)
	{
		my $x2 = $x + $dirs[$dir]->[0];
		my $y2 = $y + $dirs[$dir]->[1];
		my $tile = read_map($x2, $y2);
		if ($tile eq ' ')
		{
			my $clone = clone_cpu($cpu);
			push @{$clone->{'input'}}, $dir;
			push @new, [ $x2, $y2, $clone ];
		}
	}
	return @new;
}

sub clone_cpu
{
	my ($cpu) = @_;

	return {
		'name'=>$cpu->{'name'},
		'mem'=>[@{$cpu->{'mem'}}],
		'input'=>[@{$cpu->{'input'}}],
		'output'=>[@{$cpu->{'output'}}],
		'pc'=>$cpu->{'pc'},
		'relbase'=>$cpu->{'relbase'},
	};
}

sub read_map
{
	my ($x, $y) = @_;
	$y -= $min_y;
	return ' ' if ($y < 0 || $y >= @map);
	my $row = $map[$y];
	$x -= $min_x;
	return ' ' if ($x < 0 || $x >= length($row));
	return substr($row, $x, 1);
}

sub add_to_map
{
	my ($x, $y, $tile) = @_;

	while ($x < $min_x)
	{
		foreach my $row (@map)
		{
			$row = " " . $row;
		}
		$min_x--;
	}
	$x -= $min_x;
	while ($y < $min_y)
	{
		unshift @map, "";
		$min_y--;
	}
	$y -= $min_y;
	while ($x >= length($map[$y]))
	{
		$map[$y] .= " ";
	}
	substr($map[$y], $x, 1, $tile);
}

sub draw_map
{
	print("\x1b[H\x1b[2J");
	foreach my $row (@map)
	{
		printf("%s\n", $row);
	}
}

sub charmode
{
        system("stty cbreak -echo -icanon min 1 time 0 </dev/tty > /dev/tty 2>&1");
}

sub linemode
{
        system("stty -cbreak echo icanon </dev/tty > /dev/tty 2>&1");
}


sub getkey
{
	my $buf;
	sysread(STDIN, $buf, 1);
	return chr(vec($buf, 0, 8));
}

######

sub make_cpu
{
	my ($name, $program, $input, $output) = @_;
	return {
		'name'=>$name,
		'mem'=>[@{$program}],
		'input'=>$input,
		'output'=>$output,
		'pc'=>0,
		'relbase'=>0,
	};
}

sub run_cpu
{
	my ($cpu) = @_;
	printf("[%s resuming]\n", $cpu->{'name'}) if ($trace);

	while (1)
	{
		my $opc = opcode($cpu);
		printf("%d: opc %d\n", $cpu->{'pc'}, $opc) if ($trace);
		if ($opc == 1)
		{
			# $1 + $2 -> $3
			store($cpu, 3, param($cpu, 1) + param($cpu, 2));
			$cpu->{'pc'} += 4;
		}
		elsif ($opc == 2)
		{
			# $1 * $2 -> $3
			store($cpu, 3, param($cpu, 1) * param($cpu, 2));
			$cpu->{'pc'} += 4;
		}
		elsif ($opc == 3)
		{
			# input -> $1
			my $inp = input($cpu);
			if (!defined $inp)
			{
				printf("%s stalling for input\n", $cpu->{'name'}) if ($trace);
				return 0;
			}

			store($cpu, 1, $inp);
			$cpu->{'pc'} += 2;
		}
		elsif ($opc == 4)
		{
			# $1 -> output
			output($cpu, param($cpu, 1));
			$cpu->{'pc'} += 2;
		}
		elsif ($opc == 5)
		{
			# if $1, pc -> $2
			if (param($cpu, 1))
			{
				$cpu->{'pc'} = param($cpu, 2);
				print(" jump true -> $cpu->{'pc'}\n") if ($trace);
			}
			else
			{
				$cpu->{'pc'} += 3;
			}
		}
		elsif ($opc == 6)
		{
			# if !$1, pc -> $2
			if (!param($cpu, 1))
			{
				$cpu->{'pc'} = param($cpu, 2);
				print(" jump false -> $cpu->{'pc'}\n") if ($trace);
			}
			else
			{
				$cpu->{'pc'} += 3;
			}
		}
		elsif ($opc == 7)
		{
			# $3 = $1 < $2
			store($cpu, 3, (param($cpu, 1) < param($cpu, 2)) ? 1 : 0);
			$cpu->{'pc'} += 4;
		}
		elsif ($opc == 8)
		{
			# $3 = $1 == $2
			store($cpu, 3, (param($cpu, 1) == param($cpu, 2)) ? 1 : 0);
			$cpu->{'pc'} += 4;
		}
		elsif ($opc == 9)
		{
			# relbase += $1
			$cpu->{'relbase'} += param($cpu, 1);
			$cpu->{'pc'} += 2;
		}
		elsif ($opc == 99)
		{
			print("Program terminated at $cpu->{'pc'}\n") if ($trace);
			last;
		}
		else
		{
			print("Invalid opcode $opc at position $cpu->{'pc'}\n");
			last;
		}
	}

	printf("[ %s halting ]\n", $cpu->{'name'}) if ($trace);

	return 1;
}

sub opcode
{
	my ($cpu) = @_;
	return $cpu->{'mem'}->[$cpu->{'pc'}] % 100;
}

sub param_mode
{
	my ($cpu, $num) = @_;
	return ($cpu->{'mem'}->[$cpu->{'pc'}] / (10 ** ($num + 1))) % 10;
}

sub param
{
	my ($cpu, $num) = @_;

	my $param = $cpu->{'mem'}->[$cpu->{'pc'} + $num];

	my $mode = param_mode($cpu, $num);
	if ($mode == 0)
	{
		my $p = $cpu->{'mem'}->[$param];
		printf(" param %d = [%d] = %d\n", $num, $param, $p) if ($trace);
		return $p;
	}
	elsif ($mode == 2)
	{
		my $p = $cpu->{'mem'}->[$cpu->{'relbase'} + $param];
		printf(" param %d = [%d + %d] = %d\n", $num, $cpu->{'relbase'}, $param, $p) if ($trace);
		return $p;
	}
	printf(" param %d = %d\n", $num, $param) if ($trace);
	return $param;
}

sub store
{
	my ($cpu, $num, $val) = @_;

	my $mode = param_mode($cpu, $num);
	my $param = $cpu->{'mem'}->[$cpu->{'pc'} + $num];
	my $addr;
	if ($mode == 0)
	{
		$addr = $param;
		printf(" store %d -> [%d]\n", $val, $param) if ($trace);
	}
	elsif ($mode == 2)
	{
		$addr = $cpu->{'relbase'} + $param;
		printf(" store %d -> [%d + %d]\n", $val, $cpu->{'relbase'}, $param) if ($trace);
	}
	else
	{
		die "* Illegal parameter mode at $cpu->{'pc'}\n";
	}

	$cpu->{'mem'}->[$addr] = $val;
}

sub input
{
	my ($cpu) = @_;
	my $val = shift @{$cpu->{'input'}};
	if (defined $val)
	{
		printf(" [ input %d ]\n", $val) if ($trace);
	}
	return $val;
}

sub output
{
	my ($cpu, $val) = @_;
	printf(" [ output %s ]\n", $val) if ($trace);
	push @{$cpu->{'output'}}, $val;
}

sub make_perms
{
	my @vals = @_;
	my @ret;

	if (@vals == 1)
	{
		return ([ $vals[0] ]);
	}

	for (my $i = 0; $i < @vals; $i++)
	{
		my @subvals = @vals;
		splice(@subvals, $i, 1);
		foreach my $v (make_perms(@subvals))
		{
			push @ret, [ $vals[$i], @$v ];
		}
	}

	return @ret;
}

