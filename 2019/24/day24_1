#!/usr/bin/perl

use strict;
use integer;

my $trace = 0;

my @input;
my @output;

my $sum = 0;

while ($ARGV[0] =~ /^-/)
{
	my $arg = shift @ARGV;
	if ($arg eq '-t')
	{
		$trace = 1;
	}
	elsif ($arg eq '-i')
	{
		push @input, shift @ARGV;
	}
}

my $layout = 0;
my $bitval = 1;

while (my $line = <>)
{
	while ($line =~ /([\.#])/g)
	{
		$layout += $bitval if ($1 eq '#');
		$bitval *= 2;
	}
}

my %visited = ( $layout=>1 );
while (1)
{
	$layout = generate($layout);
	last if ($visited{$layout});
	$visited{$layout} = 1;
}

printf("Biodiversity: %d\n", $layout);

exit(0);

sub generate
{
	my ($l) = @_;

	# '#' + 1       -> '#'
	# '#' + 0,2,3,4 -> '.'
	# '.' + 1,2     -> '#'
	# '.' + 0,3,4   -> '.'

	my $a = ($l << 5) & ((0x1f << 5) | (0x1f << 10) | (0x1f << 15) | (0x1f << 20));
	my $b = ($l << 1) & (0x1e | (0x1e << 5) | (0x1e << 10) | (0x1e << 15) | (0x1e << 20));
	my $c = ($l >> 1) & (0xf | (0xf << 5) | (0xf << 10) | (0xf << 15) | (0xf << 20));
	my $d = ($l >> 5) & (0x1f | (0x1f << 5) | (0x1f << 10) | (0x1f << 15));

	return (($l & (($a & ~$b & ~$c & ~$d) |
	               (~$a &  $b & ~$c & ~$d) |
	               (~$a & ~$b &  $c & ~$d) |
	               (~$a & ~$b & ~$c &  $d))) |

	        (~$l & (( $a & ~$b & ~$c & ~$d) |
	                (~$a &  $b & ~$c & ~$d) |
	                (~$a & ~$b &  $c & ~$d) |
	                (~$a & ~$b & ~$c &  $d) |

	                ( $a &  $b & ~$c & ~$d) |
	                ( $a & ~$b &  $c & ~$d) |
	                ( $a & ~$b & ~$c &  $d) |
	                (~$a &  $b &  $c & ~$d) |
	                (~$a &  $b & ~$c &  $d) |
	                (~$a & ~$b &  $c &  $d)))); 
}

sub draw_layout
{
	my ($l) = @_;

	my $bitval = 1;

	while ($bitval <= 0x00100000)
	{
		printf("%s%s%s%s%s\n", ($l & $bitval) ? '#' : '.', ($l & ($bitval<<1)) ? '#' : '.', ($l & ($bitval<<2)) ? '#' : '.', ($l & ($bitval<<3)) ? '#' : '.', ($l & ($bitval<<4)) ? '#' : '.');
		$bitval <<= 5;
	}
	print("\n");
}
