#!/usr/bin/perl

use strict;

my $PI = 3.14159275358979;

my $trace = 0;
my @map;

while (my $line = <>)
{
    chomp($line);
    push @map, $line;
}

my $height = @map;
my $width = length($map[0]);

my $max_asteroids = 0;
my ($base_x, $base_y);

for (my $y = 0; $y < $height; $y++)
{
	for (my $x = 0; $x < $width; $x++)
	{
		next if (substr($map[$y], $x, 1) ne '#');
		my @asteroids = find_asteroids(\@map, $x, $y);
		if (@asteroids > $max_asteroids)
		{
			$max_asteroids = @asteroids;
			$base_x = $x;
			$base_y = $y;
		}
	}
}

printf("Answer: %d (at %d, %d)\n", $max_asteroids, $base_x, $base_y);

my @asteroids = find_asteroids(\@map, $base_x, $base_y);

my %by_angle;

foreach my $asteroid (@asteroids)
{
	my $angle = atan2($asteroid->[1], $asteroid->[0]);
	$angle += $PI*2 if ($angle < -$PI/2);
	$by_angle{$angle} = $asteroid;
}

my @sorted = sort { $a <=> $b } keys(%by_angle);
my $no200 = $by_angle{$sorted[199]};
my $x = $base_x + $no200->[0];
my $y = $base_y + $no200->[1];
printf("Answer: %d\n", $x*100 + $y);

exit(0);

sub find_asteroids
{
	my ($map, $base_x, $base_y) = @_;

	my @map = @$map;
	my %angles;

	substr($map[$base_y], $base_x, 1, 'H');
	for (my $y = 0; $y < $height; $y++)
	{
		for (my $x = 0; $x < $width; $x++)
		{
			if (substr($map[$y], $x, 1) eq '#')
			{
				substr($map[$y], $x, 1, '@');
				my $dx = $x - $base_x;
				my $dy = $y - $base_y;
				my $g = gcd(($dx < 0) ? -$dx : $dx,
					    ($dy < 0) ? -$dy : $dy);
				$dx /= $g;
				$dy /= $g;
				my $angle = "$dx,$dy";
				$angles{$angle} = $g if (!$angles{$angle} || $g < $angles{$angle});
			}
		}
	}
	show_map(\@map) if ($trace);

	my @asteroids;
	while (my ($k, $v) = each (%angles))
	{
		my ($dx, $dy) = split(',', $k);
		push @asteroids, [$dx*$v, $dy*$v];
	}

	return @asteroids;
}

sub show_map
{
    my ($map) = @_;
    foreach my $row (@$map)
    {
	print("    $row\n");
    }
}

sub gcd
{
    my ($a, $b) = @_;
    while (1)
    {
        if ($b > $a)
        {
	   return $b if (!$a);
	   $b -= $a;
        }
	elsif ($a > $b)
	{
	   return $a if (!$b);
	   $a -= $b;
	}
	else
	{
	    return $a;
	}
    }
}
