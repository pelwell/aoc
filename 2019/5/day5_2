#!/usr/bin/perl

use strict;
use integer;

my $trace = 0;
my $g_mem;
my $g_pc;

my @g_input;
my @g_output;

my $sum = 0;

$/ = undef; # slurp

while ($ARGV[0] =~ /^-/)
{
	my $arg = shift @ARGV;
	if ($arg eq '-t')
	{
		$trace = 1;
	}
	elsif ($arg eq '-i')
	{
		push @g_input, shift @ARGV;
	}
}

my $program = <>;
$program =~ s/\s+//g;

my @program = split(",", $program);

my @mem = @program;

run_test(\@mem);
print("Final state: ", join(',', @mem), "\n") if ($trace);

print("Answer: ", join(',', @g_output), "\n");

exit(0);

sub run_test
{
	my ($mem, $noun, $verb) = @_;

	$g_mem = $mem;

	$g_mem->[1] = $noun if (defined $noun);
	$g_mem->[2] = $verb if (defined $verb);
	$g_pc = 0;

	while (1)
	{
		my $opc = opcode();
		printf("%d: opc %d\n", $g_pc, $opc) if ($trace);
		if ($opc == 1)
		{
			# $1 + $2 -> $3
			store(3, param(1) + param(2));
			$g_pc += 4;
		}
		elsif ($opc == 2)
		{
			# $1 * $2 -> $3
			store(3, param(1) * param(2));
			$g_pc += 4;
		}
		elsif ($opc == 3)
		{
			# input -> $1
			store(1, input());
			$g_pc += 2;
		}
		elsif ($opc == 4)
		{
			# $1 -> output
			output(param(1));
			$g_pc += 2;
		}
		elsif ($opc == 5)
		{
			# if $1, pc -> $2
			if (param(1))
			{
				$g_pc = param(2);
				print(" jump true -> $g_pc\n") if ($trace);
			}
			else
			{
				$g_pc += 3;
			}
		}
		elsif ($opc == 6)
		{
			# if !$1, pc -> $2
			if (!param(1))
			{
				$g_pc = param(2);
				print(" jump false -> $g_pc\n") if ($trace);
			}
			else
			{
				$g_pc += 3;
			}
		}
		elsif ($opc == 7)
		{
			# $3 = $1 < $2
			store(3, (param(1) < param(2)) ? 1 : 0);
			$g_pc += 4;
		}
		elsif ($opc == 8)
		{
			# $3 = $1 == $2
			store(3, (param(1) == param(2)) ? 1 : 0);
			$g_pc += 4;
		}
		elsif ($opc == 99)
		{
			print("Program terminated at $g_pc\n") if ($trace);
			last;
		}
		else
		{
			print("Invalid opcode $opc at position $g_pc\n");
			last;
		}
	}
}

sub opcode
{
	return $g_mem->[$g_pc] % 100;
}

sub param_mode
{
	my ($num) = @_;
	return ($g_mem->[$g_pc] / (10 ** ($num + 1))) % 10;
}

sub param
{
	my ($num) = @_;

	my $param = $g_mem->[$g_pc + $num];

	if (param_mode($num) == 0)
	{
		my $p = $g_mem->[$param];
		printf(" param %d = [%d] = %d\n", $num, $param, $p) if ($trace);
		return $p;
	}

	printf(" param %d = %d\n", $num, $param) if ($trace);
	return $param;
}

sub store
{
	my ($num, $val) = @_;

	die "* Illegal parameter mode at $g_pc\n" if (param_mode($num) != 0);

	my $addr = $g_mem->[$g_pc + $num];

	printf(" store %d -> [%d]\n", $val, $addr) if ($trace);

	$g_mem->[$addr] = $val;
}

sub input
{
	die "* End of input\n" if (!@g_input);
	printf(" [ input %d ]\n", $g_input[0]) if ($trace);
	return shift @g_input;
}

sub output
{
	my ($val) = @_;
	printf(" [ output %s ]\n", $val) if ($trace);
	push @g_output, $val;
}
